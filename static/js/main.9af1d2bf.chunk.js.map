{"version":3,"sources":["containers/Body.js","presentational/Header.js","error-boundaries/WrapperErrorBoundary.js","presentational/Results.js","utils/utilities.js","containers/Form.js","presentational/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","padding","spacing","Body","props","children","classes","Container","className","maxWidth","typography","fontWeight","marginBottom","Header","Typography","variant","align","WrapperErrorBoundary","state","hasError","error","errorInfo","console","this","React","Component","withStyles","paper","margin","fontSize","divider","Results","EarliestPermissibleDebitOrderStartMonth","TotalContributions","ExcessContributions","Paper","my","px","Box","display","flexWrap","flexDirection","m","flexGrow","color","Divider","light","Number","component","formatNumberDecimal","input","parseFloat","toFixed","applicationCheck","applicationParameters","object","Object","entries","key","value","formatNumbers","LumpSumInvestmentMonth","LumpSumInvestmentAmount","DebitOrderStartMonth","DebitOrderAmount","scopeState","MonthsRemaining","StartMonth","MaximumDebitMonths","MaximumDebitAmount","MaximumTotal","calculateStartMonth","CalculateMonth","setStartMonth","setMonthsRemaining","setMaximumDebitAmount","setMaximumTotal","log","Math","floor","setEarliestStartMonth","radioGroup","inputBase","transform","Form","useForm","register","handleSubmit","setValue","useState","fieldVisibility","setFieldVisibility","selectedDate","setSelectedDate","applicationResults","setApplicationResults","useEffect","name","Date","getMonth","autoComplete","onSubmit","formData","utils","MomentUtils","width","FormControl","fullWidth","FormLabel","RadioGroup","aria-label","onChange","event","target","FormControlLabel","control","Radio","label","FormHelperText","format","views","openTo","disableToolbar","disablePast","autoOk","helperText","inputVariant","KeyboardButtonProps","monthValue","month","handleDebitMonthUpdate","TextField","required","type","InputProps","startAdornment","InputAdornment","position","inputProps","inputRef","max","handleLumpSumMonthUpdate","Button","size","Wrapper","Grid","container","alignItems","justify","item","xs","sm","md","lg","xl","App","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","palette","primary","main","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9af1d2bf.chunk.js","sourcesContent":["import React from 'react';\n// Theme\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(5, 2, 5, 2),\n    },\n}));\n\nconst Body = (props) => {\n\n    const { children } = props;\n    const classes = useStyles();\n\n    return (\n        <Container className={classes.root} maxWidth=\"lg\">\n            {children}\n        </Container>\n    );\n}\n\nexport default Body;","import React from 'react';\n// Theme\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n    typography: {\n        fontWeight: 300,\n        marginBottom: theme.spacing(5),\n    }\n}));\n\nconst Header = (props) => {\n\n    const classes = useStyles();\n\n    return (\n        <Typography className={classes.typography} variant=\"h4\" align=\"center\">Tax Free Investment Application</Typography>\n    );\n}\n\nexport default Header;","import React from 'react';\n// Theme\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = (theme) => ({\n    typography: {\n        fontWeight: 300,\n        marginBottom: theme.spacing(5),\n    }\n});\n\nclass WrapperErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.error({error}, errorInfo);\n    }\n\n    render() {\n\n    const classes = this.props;\n\n    if (this.state.hasError) {\n        return (\n            <Typography className={classes.typography} variant=\"h5\" align=\"center\">Sorry, something went wrong :(</Typography>\n        );\n    }\n\n        return this.props.children; \n    }\n}\n\nexport default withStyles(useStyles)(WrapperErrorBoundary);","import React from 'react';\n// Theme\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        margin: theme.spacing(5,3),\n        padding: theme.spacing(2),\n    },\n    typography: {\n        fontWeight: 300,\n        '& small': {\n            fontSize: 12,\n        }\n    },\n    divider: {\n        margin: theme.spacing(2, 0),\n    },\n}));\n\nconst Results = (props) => {\n\n    const { EarliestPermissibleDebitOrderStartMonth, TotalContributions, ExcessContributions } = props;\n\n    const classes = useStyles();\n\n    return (\n        <Paper className={classes.paper} my={5} px={2}>\n            <Box display=\"flex\" flexWrap=\"wrap\" flexDirection=\"column\" m={1}>\n                <Box flexGrow={1}>\n                    {EarliestPermissibleDebitOrderStartMonth && (\n                        <Typography className={classes.typography} variant=\"h6\" color=\"textSecondary\">Debit Order Start Month: &nbsp;\n                            <Typography display=\"inline\" color=\"textPrimary\">{EarliestPermissibleDebitOrderStartMonth}</Typography> &nbsp;\n                            <Typography display=\"inline\" color=\"textSecondary\"><sup>(2,500 pm)</sup></Typography>\n                        </Typography>\n                    )}\n                </Box>\n                <Divider light className={classes.divider} />\n                <Box flexGrow={1}>\n                    {TotalContributions && (\n                        <Typography className={classes.typography} variant=\"h6\" color=\"textSecondary\">Total Contributions: &nbsp;\n                            <Typography display=\"inline\" color=\"textPrimary\">{TotalContributions}</Typography>\n                            {(Number(ExcessContributions) > 0) && (\n                                <Typography className={classes.typography} variant=\"subtitle1\">\n                                    Your contributions are in excess of: &nbsp;\n                                    <Typography display=\"inline\" color=\"error\">{ExcessContributions}</Typography> *<br/>\n                                    <Typography display=\"inline\" component=\"small\" color=\"textSecondary\">* Consider adjusting your first debit month to the suggested start month above or reducing the investment amount</Typography>\n                                </Typography>\n                            )}\n                        </Typography>\n                    )}\n                </Box>\n            </Box>\n        </Paper>\n    );\n}\n\nexport default Results;","/**\n * A number, or a string containing a number.\n * @typedef {(number|string)} NumberLike\n */\n\n/**\n * Formats input to float\n * @param {NumberLike} input - the number or string to convert to a float\n * @returns {string} A float\n */\nfunction formatNumberDecimal(input) {\n    return Number.parseFloat(input).toFixed(2);\n}\n\n/**\n * Formats input to integer\n * @param {Object} object - the object containing numbers or strings to convert to integers\n * @param {NumberLike} object.LumpSumInvestmentMonth - the chosen month of the lump sum investment\n * @param {NumberLike} object.LumpSumInvestmentAmount - the specified lump sum investment amount\n * @param {NumberLike} object.DebitOrderStartMonth - the chosen month of the first debit order\n * @param {NumberLike} object.DebitOrderAmount - the predefined monthly deposit amount\n * @returns {Object} Converted value types\n */\nfunction formatNumbers(object) {\n    for(let [key, value] of Object.entries(object)) {\n        value = Number(value);\n        object = { ...object, [key]: value };\n    }\n    return object;\n}\n\n/**\n * Formats input to integer\n * @param {Object} applicationParameters - the object containing numbers or strings to convert to integers\n * @param {NumberLike} applicationParameters.LumpSumInvestmentMonth - the chosen month of the lump sum investment\n * @param {NumberLike} applicationParameters.LumpSumInvestmentAmount - the specified lump sum investment amount\n * @param {NumberLike} applicationParameters.DebitOrderStartMonth - the chosen month of the first debit order\n * @param {NumberLike} applicationParameters.DebitOrderAmount - the predefined monthly deposit amount\n * @returns {Object} EarliestPermissibleDebitOrderStartMonth that first debit order may occur, TotalContributions of lump sum and debit orders, ExcessContributions exceeding tax year cap\n * @todo Allow variable debit amount input.\n */\nexport default function applicationCheck(applicationParameters) {\n\n    let { LumpSumInvestmentMonth = 0, LumpSumInvestmentAmount = 0, DebitOrderStartMonth = 0, DebitOrderAmount = 0 } = formatNumbers(applicationParameters);\n\n    /** @constant {number} \n     *  @default\n     */\n    const LUMP_SUM_LIMIT = 30000;\n\n    let EarliestPermissibleDebitOrderStartMonth,\n        TotalContributions,\n        ExcessContributions;\n\n    const scopeState = {\n        MonthsRemaining: 0,\n        StartMonth: 0,\n        MaximumDebitMonths: 0,\n        MaximumDebitAmount: 0,\n        MaximumTotal: 0,\n        ExcessContributions: 0,\n    }\n\n    /**\n     * Calculates debit start month\n     * @param {number} CalculateMonth - an integer representing a month in a 14 month cycle\n     * @returns {number} integer representing month of first debit order\n     */\n    const calculateStartMonth = (CalculateMonth) => {\n        switch(CalculateMonth) {\n            case 13: // Jan\n                return 1;\n            case 14: // Feb\n                return 2;\n            default:\n                return CalculateMonth;\n        }\n    }\n\n    /**\n     * Sets debit start month\n     * @description determine if lump sum amount is provided and if lump sum month is greater than debit month, then select the applicable start month reference\n     * @summary determine applicable start month reference (uses scoped state)\n     */\n    const setStartMonth = () => {\n        let CalculateMonth = (LumpSumInvestmentAmount > 0 && LumpSumInvestmentMonth >= DebitOrderStartMonth) ? (LumpSumInvestmentMonth + 1) : DebitOrderStartMonth;\n        scopeState.StartMonth = calculateStartMonth(CalculateMonth);\n    }\n\n    /**\n     * Sets remaining months of the year\n     * @description determine which side of the tax year application falls on, then select the applicable total to deduct start month from\n     * @summary determine which side of the tax year to deduct start month from (uses scoped state)\n     */\n    const setMonthsRemaining = () => {\n        let { StartMonth, MonthsRemaining } = scopeState;\n\n        if(StartMonth <= 2) {\n            MonthsRemaining = 2 - StartMonth;\n        } else {\n            MonthsRemaining = 14 - StartMonth;\n        }\n        scopeState.MonthsRemaining = MonthsRemaining;\n    }\n\n    /**\n     * Sets maximum amount that may be debited\n     * @description determine maximum debit contributions by multiplying the monthly debit amount by the remaining months\n     * @summary determine maximum amount that may be debited in remaining tax year (uses scoped state)\n     */\n    const setMaximumDebitAmount = () => {\n        let { MonthsRemaining } = scopeState;\n        scopeState.MaximumDebitAmount = MonthsRemaining * DebitOrderAmount;\n    }\n\n    /**\n     * Sets maximum total contributions\n     * @description determine maximum total contributions by summing the maximum debit amount possible with any provided lump sum investment\n     * @summary determine maximum total contributions for the remaining tax year (uses scoped state)\n     */\n    const setMaximumTotal = () => {\n        let { MaximumDebitAmount } = scopeState;\n        scopeState.MaximumTotal = MaximumDebitAmount + LumpSumInvestmentAmount;\n    }\n\n    /**\n     * Sets earliest possible debit month\n     * @description determine if any debit months are possible and roll over to first debit month of the follow tax year, else determine the earliest possible debit month by deducting the maximum debit months possible from the remaining months of the tax year. Set excess contributions from the difference of the maximum total contributions and tax year contributions cap.\n     * @summary determine the earliest possible debit month if in excess of contributions tax cap (uses scoped state)\n     */\n    const setEarliestStartMonth = () => {\n        let { MaximumDebitMonths, StartMonth, MonthsRemaining } = scopeState;\n\n        MaximumDebitMonths = Math.floor((LUMP_SUM_LIMIT - LumpSumInvestmentAmount) / DebitOrderAmount);\n\n        if(MaximumDebitMonths > 0) {\n            let CalculateMonth = (MonthsRemaining - MaximumDebitMonths) + (StartMonth + 1);\n            scopeState.StartMonth = calculateStartMonth(CalculateMonth);\n        } else {\n            scopeState.StartMonth = 3; // roll over to beginning of next tax year\n        }\n        scopeState.ExcessContributions = scopeState.MaximumTotal - LUMP_SUM_LIMIT;\n    }\n\n    setStartMonth();\n    setMonthsRemaining();\n    setMaximumDebitAmount();\n    setMaximumTotal();\n\n    if (LumpSumInvestmentAmount > LUMP_SUM_LIMIT) {\n        console.log('Exceeds contributions limit.');\n    } else if(scopeState.MaximumTotal > LUMP_SUM_LIMIT) {\n        setEarliestStartMonth();\n    }\n\n    EarliestPermissibleDebitOrderStartMonth = scopeState.StartMonth;\n    TotalContributions = formatNumberDecimal(scopeState.MaximumTotal);\n    ExcessContributions = formatNumberDecimal(scopeState.ExcessContributions);\n\n    return { EarliestPermissibleDebitOrderStartMonth, TotalContributions, ExcessContributions };\n}","import React, { Fragment, useState } from 'react';\n// Components\nimport Results from '../presentational/Results';\n// Utils\nimport applicationCheck from '../utils/utilities';\n// 3rd Party\nimport { useForm } from \"react-hook-form\"; // form validation & submission\n// Theme\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport MomentUtils from '@date-io/moment';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nconst useStyles = makeStyles(theme => ({\n    radioGroup: {\n        flexDirection: 'row',\n    },\n    divider: {\n        margin: theme.spacing(2, 0),\n    },\n    inputBase: {\n        '& legend': {\n            fontSize: '1rem !important',\n        },\n        '& .MuiInputLabel-outlined.MuiInputLabel-shrink': {\n            transform: 'translate(14px, -6px)',\n        }\n    }\n}));\n\nconst Form = () => {\n\n    const { register, handleSubmit, setValue } = useForm();\n\n    const   [fieldVisibility, setFieldVisibility] = useState('no'),\n            [selectedDate, setSelectedDate] = useState({}),\n            [applicationResults, setApplicationResults] = useState();\n\n    const DEBIT_AMOUNT = '2,500';\n\n    const handleFieldVisibility = (event) => {\n        setFieldVisibility(event.target.value);\n    };\n\n    const handleDebitMonthUpdate = (value) => {\n        let monthValue = value ? value.month()+1 : null;\n        setValue('DebitOrderStartMonth', monthValue);\n        setSelectedDate({ ...selectedDate, 'DebitOrderStartMonth': value });\n    }\n\n    const handleLumpSumMonthUpdate = (value) => {\n        let monthValue = value ? value.month()+1 : null;\n        setValue('LumpSumInvestmentMonth', monthValue);\n        setSelectedDate({ ...selectedDate, 'LumpSumInvestmentMonth': value });\n    }\n\n    const onSubmit = (formData) => {\n        setApplicationResults(applicationCheck(formData));\n    }\n    \n    React.useEffect(() => {\n        register({ name: 'DebitOrderStartMonth', value: new Date().getMonth()+1 });\n        register({ name: 'LumpSumInvestmentMonth', value: new Date().getMonth()+1 });\n        register({ name: 'DebitOrderAmount', value: 2500 });\n        register({ name: 'LumpSumInvestmentAmount', value: 0 });\n    }, [register]);\n\n    const classes = useStyles();\n\n    return (\n        <Fragment>\n            <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\n                { /* TODO : allow variable debit amount input */ }\n                <MuiPickersUtilsProvider utils={MomentUtils}>\n                    <Box display=\"flex\" flexWrap=\"wrap\" m={1}>\n                        <Box width=\"50%\" px={2}>\n                            <FormControl component=\"fieldset\" fullWidth={true}>\n                                <FormLabel component=\"legend\">Investment Lump Sum</FormLabel>\n                                <RadioGroup aria-label=\"Investment Lump Sum\" name=\"investmentLumpSum\" value={fieldVisibility} onChange={handleFieldVisibility}>\n                                    <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\n                                    <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\n                                </RadioGroup>\n                                <FormHelperText>Kick start your investment with a lump sum</FormHelperText>\n                            </FormControl>\n                        </Box>\n                        <Box width=\"50%\" px={2}>\n                            <KeyboardDatePicker \n                                name=\"DebitOrderStartMonth\"\n                                className={classes.inputBase}\n                                fullWidth={true}\n                                variant=\"inline\"\n                                format=\"MM/YYYY\"\n                                views={[\"year\",\"month\"]}\n                                openTo=\"month\"\n                                disableToolbar={false}\n                                disablePast={true}\n                                autoOk={true}\n                                margin=\"normal\"\n                                label=\"First debit month\"\n                                helperText={`The first month your debit order will be taken (${DEBIT_AMOUNT} pm)`}\n                                inputVariant=\"outlined\"\n                                KeyboardButtonProps={{\n                                    'aria-label': 'Change first debit month',\n                                }}\n                                value={selectedDate.DebitOrderStartMonth}\n                                onChange={(value) => handleDebitMonthUpdate(value)}\n                            />\n                        </Box>\n                    </Box>\n                    {fieldVisibility === 'yes' && (\n                        <Box display=\"flex\" flexWrap=\"wrap\" m={1}>\n                            <Box width=\"50%\" px={2}>\n                                { /* TODO : separator and decimal formatting, input masks, and other input constraints (e.g: max length) */ }\n                                <TextField \n                                    name=\"LumpSumInvestmentAmount\"\n                                    className={classes.inputBase}\n                                    required \n                                    fullWidth={true}\n                                    margin=\"normal\"\n                                    label=\"Lump Sum Amount\" \n                                    aria-label=\"Lump Sum Amount\" \n                                    variant=\"outlined\" \n                                    helperText=\"Enter an amount no greater than R30,000\"\n                                    type=\"number\"\n                                    InputProps={{ // component props\n                                        startAdornment: <InputAdornment position=\"start\">R</InputAdornment>,\n                                    }}\n                                    inputProps={{ // input element props\n                                        'max': '30000',\n                                    }}\n                                    inputRef={register({ required: true, max: 30000 })}\n                                />\n                            </Box>\n                            <Box width=\"50%\" px={2}>\n                                <KeyboardDatePicker\n                                    name=\"LumpSumInvestmentMonth\"\n                                    className={classes.inputBase}\n                                    required \n                                    fullWidth={true}\n                                    variant=\"inline\"\n                                    format=\"MM/YYYY\"\n                                    views={[\"year\",\"month\"]}\n                                    openTo=\"month\"\n                                    disableToolbar={false}\n                                    disablePast={true}\n                                    autoOk={true}\n                                    margin=\"normal\"\n                                    label=\"Lump Sum Investment Month\"\n                                    helperText=\"The month your lump sum will be invested\"\n                                    inputVariant=\"outlined\"\n                                    KeyboardButtonProps={{\n                                        'aria-label': 'Change lump sum investment month',\n                                    }}\n                                    value={selectedDate.LumpSumInvestmentMonth}\n                                    onChange={(value) => handleLumpSumMonthUpdate(value)}\n                                />\n                            </Box>\n                        </Box>\n                    )}\n                    <Box display=\"flex\" flexWrap=\"wrap\" flexDirection=\"column\" m={1}>\n                        <Box px={2}>\n                            <Divider className={classes.divider} />\n                            <Button variant=\"outlined\" size=\"large\" type=\"submit\">Submit</Button>\n                        </Box>\n                    </Box>\n                </MuiPickersUtilsProvider>\n            </form>\n            {applicationResults && <Results { ...applicationResults } />}\n        </Fragment>\n    );\n}\n\nexport default Form;","import React from 'react';\n// Components\nimport WrapperErrorBoundary from '../error-boundaries/WrapperErrorBoundary';\nimport Form from '../containers/Form';\n// Theme\nimport Grid from '@material-ui/core/Grid';\n\nconst Wrapper = () => {\n\n    return (\n        <WrapperErrorBoundary>\n            <Grid container alignItems=\"center\" justify=\"center\">\n                <Grid item xs={10} sm={8} md={8} lg={8} xl={8}>\n                    <Form />\n                </Grid>\n            </Grid>\n        </WrapperErrorBoundary>\n    );\n}\n\nexport default Wrapper;","import React, { useMemo } from 'react';\n// Components\nimport Body from './containers/Body';\nimport Header from './presentational/Header';\nimport Wrapper from './presentational/Wrapper';\n// Theme\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nfunction App() {\n\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = useMemo(\n      () =>\n          createMuiTheme({\n              palette: {\n                  type: prefersDarkMode ? 'dark' : 'light',\n                  primary: {\n                      main: '#aa1111',\n                  },\n              },\n          }),\n      [prefersDarkMode],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Body>\n        <Header />\n        <Wrapper />\n      </Body>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}